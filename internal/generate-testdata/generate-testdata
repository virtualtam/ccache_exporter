#!/bin/bash -ex
#
# Generate sample ccache output testdata for a given Debian or Ubuntu version.
#
# This script:
#
# - creates a Docker container
# - saves ccache statistics with an empty cache
# - runs a first build to populate the cache, then saves ccache statistics
# - runs a second build to reuse the cache, then saves ccache statistics
#
# Usage
#
#   ./generate-testdata <docker image> <docker image tag> <container name> [remote_storage]
#
# Examples
#
#  ./generate-testdata local/ccache debian-11 ccache-testdata-debian-11
#  ./generate-testdata local/ccache ubuntu-24.04 ccache-testdata-ubuntu-24.04 1

# Docker image
IMAGE=$1

# Docker image tag
TAG=$2

# Docker container name
NAME=$3

# Remote storage enabled?
REMOTE_STORAGE=$4

REMOTE_STORAGE_NETWORK="${NAME}-remote-storage"
REMOTE_STORAGE_REDIS_NAME="${NAME}-redis"
REMOTE_STORAGE_REDIS_VERSION=7

function parse-version {
    # Convert a version code (up to 4 digits) to an integer for version
    # comparisons.
    #
    # Reference:
    # - https://stackoverflow.com/questions/4023830/how-to-compare-two-strings-in-dot-separated-version-format-in-bash
    # - https://apple.stackexchange.com/questions/83939/compare-multi-digit-version-numbers-in-bash/123408#123408
    echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'
}

function ccache-print-config() {
    # Print ccache configuration to a local directory.
    local output_dir=$1
    local version=$2
    local name="config"

    if [[ $(parse-version $version) -lt $(parse-version "3.7") ]]
    then
        docker exec $NAME ccache --print-config > $output_dir/$name
    else
        docker exec $NAME ccache --show-config > $output_dir/$name
    fi
}

function ccache-print-stats() {
    # Print ccache stats to a local directory.
    local output_dir=$1
    local version=$2
    local name=$3

    # ccache < 3.7:  machine-readable stats
    # ccache >= 3.7: human-readable stats
    docker exec $NAME ccache --show-stats > $output_dir/$name

    # ccache >= 3.7: machine-readable stats (tab-separated values)
    # https://ccache.dev/releasenotes.html#_ccache_3_7
    if [[ $(parse-version $version) -ge $(parse-version "3.7") ]]
    then
        docker exec $NAME ccache --print-stats > $output_dir/$name.tsv
    fi
}


if [[ -z ${REMOTE_STORAGE} ]]
then
    docker run --rm --name $NAME -d -it $IMAGE:$TAG
else
    # Enable remote storage with Redis
    docker network create ${REMOTE_STORAGE_NETWORK}
    docker run --rm --name ${REMOTE_STORAGE_REDIS_NAME} -d -it --network=${REMOTE_STORAGE_NETWORK} redis:${REMOTE_STORAGE_REDIS_VERSION}
    docker run \
        --rm --name $NAME -d -it \
        --network=${REMOTE_STORAGE_NETWORK} \
        -e CCACHE_REMOTE_STORAGE="redis://${REMOTE_STORAGE_REDIS_NAME}:6379" \
        -e CCACHE_REMOTE_ONLY="true" \
        $IMAGE:$TAG
fi

# Retrieve ccache version code
docker exec $NAME ccache --version
VERSION=$(docker exec $NAME bash -c 'ccache --version | grep "ccache version" | cut -d " " -f 3')

if [[ -z ${REMOTE_STORAGE} ]]
then
    OUTPUT_DIR="../../testdata/${TAG}-ccache-${VERSION}"
else
    OUTPUT_DIR="../../testdata/${TAG}-ccache-${VERSION}-redis-${REMOTE_STORAGE_REDIS_VERSION}"
fi
mkdir -p ${OUTPUT_DIR}

# Clear cache and reset stats
docker exec $NAME ccache --clear --zero-stats

# Initial cache status
ccache-print-config $OUTPUT_DIR $VERSION
ccache-print-stats $OUTPUT_DIR $VERSION empty

# First build
docker exec $NAME apt source --compile ccache
ccache-print-stats $OUTPUT_DIR $VERSION firstbuild

# Second build
docker exec $NAME apt source --compile ccache
ccache-print-stats $OUTPUT_DIR $VERSION secondbuild

# Stop and remove ccache container
docker stop ${NAME}

if [[ -n ${REMOTE_STORAGE} ]]
then
    # Stop and remove the Redis container and network bridge
    docker stop ${REMOTE_STORAGE_REDIS_NAME}
    docker network rm ${REMOTE_STORAGE_NETWORK}
fi
